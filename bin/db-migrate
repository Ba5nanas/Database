#!/usr/bin/env php
<?php
$autoloadPath = "";
$repoBasePath = "";
$currentDir = __DIR__;

while((empty($autoloadPath) || empty($repoBasePath)) && $currentDir !== "/") {
	$currentDir = realpath($currentDir . "/..");
	if(is_file("$currentDir/autoload.php")) {
		$autoloadPath = "$currentDir/autoload.php";
	}
	if(is_dir("$currentDir/vendor")) {
		$repoBasePath = $currentDir;
	}
}
require($autoloadPath);

$defaultConfig = [
	"source" => "mysql",
	"base_path" => "src/query",
	"migration_path" => "_migration",
	"migration_table" => "_migration",
	"host" => "localhost",
	"user" => "admin",
	"pass" => "",
];

$configFilePath = "$repoBasePath/config.ini";

$config = [];

if(file_exists($configFilePath)) {
	echo "Loading config from `$repoBasePath/config.ini`." . PHP_EOL;

	$fullConfig = parse_ini_file($configFilePath, true);
	if(!empty($fullConfig["database"])) {
		$config = $fullConfig["database"];
	}
}

$config = array_merge($defaultConfig, $config);

$settings = new Gt\Database\Connection\Settings(
	$config["base_path"],
	$config["source"],
	$config["database_name"],
	$config["host"],
	$config["user"],
	$config["pass"]
);

$migrationCount = 0;

$table = $config["migration_table"];
$db = new Gt\Database\Client($settings);

try {
	$result = $db->rawQuery(
		"select `migrationCount` from `$table` order by 1 desc limit 1");
	$migrationCount = (int)$result["migrationCount"];
	echo "Found existing migration count: `$migrationCount`." . PHP_EOL;
}
catch(\Exception $exception) {
	$message = $exception->getMessage();
	$tableNotFoundError = preg_match(
		"/(SQLSTATE\[42S02\])|(Base table or view not found)/",
		$message
	);

	if($tableNotFoundError) {
		echo "Migration table not found, attempting to create." . PHP_EOL;
		$db->rawQuery(
			"create table `$table` ("
			. "`migrationCount` int primary key,"
			. "`migratedAt` datetime not null )"
		);
		$db->rawQuery(
			"insert into `$table`"
			. "(`migrationCount`, `migratedAt`)"
			. "values (0, now())"
		);
		echo "Created table `$table`." . PHP_EOL;
	}
}

$previousMigrationCount = $migrationCount;
$migrationPath = implode("/", [
	$repoBasePath,
	$config["migration_path"],
]);

echo "Performing migrations within `$migrationPath`." . PHP_EOL;
$migrationFileList = scandir($migrationPath);
natsort($migrationFileList);

foreach($migrationFileList as $file) {
	if($file[0] === ".") {
		continue;
	}

	$fileNumber = (int)substr($file, 0, strpos($file, "-"));
	if($fileNumber <= $migrationCount) {
		echo "Skipping $fileNumber, already migrated." . PHP_EOL;
		continue;
	}

	try {
// Execute the migrations, advance $migrationCount only on success.
		echo "Migration $fileNumber: `$file`." . PHP_EOL;
		$sql = file_get_contents("$migrationPath/$file");
		$db->rawQuery($sql);
		$migrationCount = $fileNumber;
	}
	catch(\Exception $exception) {
		echo "An unexpected error occurred. " . $exception->getMessage();
		echo PHP_EOL;
		exit(1);
	}
}

if($previousMigrationCount === $migrationCount) {
	echo "Nothing new to migrate." . PHP_EOL;
}
else {
	try {
		$db->rawQuery(
			"update `$table` set `migrationCount` = $migrationCount");
		echo "Updated `migrationCount` to `$migrationCount`." . PHP_EOL;
	}
	catch (\Exception $exception) {
		echo "Error updating the migration count." . PHP_EOL;
		echo "Tried setting to `$migrationCount`." . PHP_EOL;
		echo $exception->getMessage();
		exit(1);
	}
}